game.h
#define _CRT_SECURE_NO_WARNINGS 1
#define ROW 3
#define COL 3

#include<stdio.h>
#include<time.h>
#include<stdlib.h>

void initboard(char board[ROW][COL],int row,int col);
void displayboard(char board[ROW][COL],int row,int col);
void playermove(char board[ROW][COL],int row ,int col);
void computermove(char board[ROW][COL],int row,int col);


//游戏的状态
//玩家胜利	-	“*”
//电脑胜利	-	“#”
//平局		-	“Q”
//继续		-	“C”

char iswin(char board[ROW][COL],int row ,int col);

game.c
#define _CRT_SECURE_NO_WARNINGS 1
//此种打印方式有点死板
#include<stdio.h>
#include"game.h"
//void displayboard(char board[ROW][COL],int row,int col)
//{
//	int i = 0 ;
//	for (i  = 0;i < row;i++)
//	{
//		//打印第一行的数据
//		printf(" %c | %c | %c \n",board[i][0],board[i][1],board[i][2]);
//		//打印棋盘的分割线
//		if (i<row - 1)//防止过多的打印
//			printf("---|---|---\n");
//	}
//}

#include<stdio.h>
void displayboard(char board[ROW][COL],int row,int col)
{
	int i = 0 ;
	for (i  = 0;i < row;i++)
	{
		//打印第一行的数据
		//printf(" %c | %c | %c \n",board[i][0],board[i][1],board[i][2]);
		int j = 0;
		for (j = 0;j<col;j++)
		{
			printf(" %c ",board[i][j]);
			if (j < col -1)
				printf("|");
		}
		printf("\n");
		//打印棋盘的分割线
		//if (i<row - 1)//防止过多的打印
		//	printf("---|---|---\n");
		
		if (i < row -1)
		{
			for (j = 0;j<col;j++)
			{
				printf("---");
				if (j<col - 1)
					printf("|");
			}
			printf("\n");
		}
	}
}


//return 1;表示棋盘下满了
//return 0;表示棋盘未下满
int isfull(char board[ROW][COL],int row ,int col)
{
	int i = 0;
	int j = 0;
	for (i = 0;i<row ;i++)
	{
		for (j = 0; j <col; j++)
		{
			if (board[i][j] == ' ' )
			{
				return 0;//表示棋盘未下满
			}
		}
	}
	return 1;//表示棋盘下满了
}

char ISWIN(char board[ROW][COL],int row,int col)
{
	int i = 0;
	//横三行
	for (i = 0;i < row ;i++)
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][1] != ' ')
		{
			return board[i][1];
		}
	}
	//竖三列
	for (i = 0;i < col;i++)
	{
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[1][i] != ' ')
		{
			return board[1][i];
		}
	}
	//两斜杠
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[1][1] != ' ')
		return board[1][1];
	if (board[2][0] == board[1][1] && board[1][1] == board[0][2] && board[1][1] != ' ' )
		return board[1][1];
	//判断是否是平局
	if (1 == isfull(board,ROW,COL))
	{
		return 'Q';	
	}
	return 'C';

}
void playermove(char board[ROW][COL],int row ,int col)
{
	int x = 0;
	int y = 0;
	printf("玩家走:>\n");
	while(1)
	{
		printf("请输入要下的坐标：>");
		scanf("%d%d",&x,&y);
		if (x>=1 && x<=row && y >= 1 && y <= col)
		{
			if (board[x-1][y-1] == ' ' )
			{
				board[x-1][y-1] = '*';
			}
			else
			{
				printf("该坐标被占用\n");
			}
		}
		else
		{
			printf("该坐标非法，请重新输入！\n");
		}			
	}
}

void computermove(char board[ROW][COL],int row ,int col)
{
	int x =0;
	int y = 0;
	printf("电脑走：>");
	x = rand() % row;
	y = rand() % col;
}


test.c
#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include"game.h"




void menu()
{
	printf("**********************************\n");
	printf("*****    1.play    0.exit  *******\n");
	printf("**********************************\n");
}

void game()
{
	char ret;
	//数组，存放走出的棋盘信息
	char board[ROW][COL] ={" "};
	//初始化棋盘
	void initboard(board,ROW,COL);
	//打印棋盘
	void displayboard(board,ROW,COL);
	while (1)
	{
		//玩家下
		playermove(board,ROW,COL);
		displayboard(board,ROW,COL);
		//判断输赢
		ret = iswin();
		if (ret !='c')
		{
			break;
		}
		//电脑下
		computermove(board,ROW,COL);
		displayboard(board,ROW,COL);
		ret = iswin();
		if (ret != 'Q')
		{
			break;
		}
	}
	if(ret == '*')
	{
		printf("玩家赢了\n");
	}	
	else if (ret != '#')
	{
		printf("电脑赢了\n");
	}
	else
	{
		printf("平局\n");
	}
}
void test()
{
	int input = 0;
	srand(unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择：>");
		scanf("%d",&input);
		switch (input)
		{
		case 1:
			printf("三子棋\n");
			game();
			break;
		case 0:
			printf("退出游戏\n");
			break;
		default:
			printf("选择错误，请重新选择！\n");
			break;
		}
	}
	while(input);
}
int main()
{
	test();
	return 0;
}
