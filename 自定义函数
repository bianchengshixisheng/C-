#define _CRT_SECURE_NO_WARNINGS 1


//100-200的素数判断的写法
//#include<stdio.h>
//int prime(int x)
//{
//	int j = 0;//与形参相比较的实参，j的值比x的值要小：j<x
//	for(j=2;j<x;j++)
//	{
//		if(x%j==0)//如此一定是一个素数
//			return 0;
//		/*else
//			return 1;*/
//		//在循环的前几次的情况下，有可能表现出来的不是素数，所以在此不能过早的定义
//	}
//	//在循环解释后，若是素数，便不能满足x%j==0 和 j<x的条件
//	return 1;
//
//}
//
//int main()
//{
//	int i = 0;
//	for (i=100;i<=200;i++)
//	{
//		//判断i是否为素数
//		if (prime(i)==1)
//			printf("%d  ",i);
//	}
//	return 0;
//}


//打印1000-2000年的闰年
//#include<stdio.h>
//int leap_yaer(int x)
//{
//	if (x%4==0 && x%100!=0 || x%400==0)
//	{
//		return 1;
//	}
//	else
//	{
//		return 0;
//	}
//}
//
//int main()
//{
//	int year = 0;
//	int sum = 0;
//	for (year = 1000; year<=2000; year++)
//	{
//		if(leap_yaer(year)==1)
//		{
//			printf("%d  ",year);
//			sum++;
//		}
//	}
//	printf("\n");
//	printf("Leap year total = %d\n",sum);
//	return 0;
//}


//整形有序数组的二分查找
//数组在进行传参的时候传递过去的仅仅只是第一个参数的地址
//实际传递的是arr的地址
//
 
//#include<stdio.h>
//int find(int arr[],int k,int sz)
//{
//	int left = 0;
//	int right = sz -1;//在自定义的函数内部求参数的数组个数是不现实的	最好的方式是在外部求好数组的个数
//	//int middle = (left+right)/2;//应该放在循环内部，否则middle的值将不变
//	while(left<=right)//此处应该有等于，若left与right重合就是相等
//	{
//		int middle = (left+right)/2;//定义的是数组中间坐标
//		if(arr[middle]>k)
//		{
//			right = middle-1;
//		}
//		else if (arr[middle]<k)
//		{
//			left = middle +1;
//		}
//		else
//			return middle;
//	}
//	return -1;
//}
//int main()
//{
//	//二分查找
//	//在一个有序数组中查找某个具体的数
//	int arr[]={1,2,3,4,5,6,7,8,9};//定义一个数组
//	int k = 7;//指定要查找的值
//	int sz = sizeof(arr)/sizeof(arr[0]);
//	int reception = find(arr,k,sz);//在自定义的函数中分别放入要查找的目标和查找的指定值
//	if (reception==-1)
//	{
//		printf("未找到你要的值\n");
//	}
//	else
//		printf("你要的值的下标是：%d\n",reception);
//	return 0;
//}


//创建一个函数，每一次调用函数，num都会加1
//*p++时，++的权限较高，所以会先++，而先++时针对的就是p，而非p*
//所以采用(p*)++的格式
//#include<stdio.h>
//void add(int* p)
//{
//	(*p)++;
//}
//
//int main()
//{
//	int num = 0;
//	add(&num);
//	printf("%d\n",num);
//	add(&num);
//	printf("%d\n",num);
//	add(&num);
//	printf("%d\n",num);
//	return 0;
//}



//链式访问
//#include<stdio.h>
//#include<string.h>
//int main()
//{
//	//第一种使用
//	int len = 0;
//	len = strlen("abc");
//	printf("%d\n ",len);
//	//第二种使用
//	printf("%d\n",strlen("abcd"));
//	return 0;
//}

//#include<stdio.h>
//int main()
//{
//	int len =0;
//	len = printf("%d\n",43);//printf函数打印在屏幕上的字符个数
	//返回值43
//	printf("%d\n",len);
	//返回值3	“\n”也将一并计算
//
//}

//先声明，后定义		但是此方法过于啰嗦
//#include<stdio.h>
//int add(int x,int y);//先声明
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int sum = 0;
//	sum = add(a,b);
//	printf("%d\n",sum);
//	return 0;
//}
////后定义
//int add(int x,int y)
//{
//	int z = x + y;
//	return z;
//}

//此种使用方法：将函数的声明放在.h头文件中，将定义放在一个.c的源文件中，再在另外一个文件中通过#include"xx.h"的方式引用此文件
